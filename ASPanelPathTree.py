#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#************************************************************************
# --- Copyright (c) Yves Secretan 2018
# ---
# --- Licensed under the Apache License, Version 2.0 (the "License");
# --- you may not use this file except in compliance with the License.
# --- You may obtain a copy of the License at
# ---
# ---     http://www.apache.org/licenses/LICENSE-2.0
# ---
# --- Unless required by applicable law or agreed to in writing, software
# --- distributed under the License is distributed on an "AS IS" BASIS,
# --- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# --- See the License for the specific language governing permissions and
# --- limitations under the License.
#************************************************************************
#
# generated by wxGlade 0.8.3 on Wed Nov 28 16:02:26 2018
#

import logging

import wx
import wx.lib.agw.hypertreelist  as HTL

try:
    import addLogLevel
    addLogLevel.addLoggingLevel('TRACE', logging.DEBUG - 5)
except AttributeError:
    pass
LOGGER = logging.getLogger("INRS.ASur.panel.path")

class ASPanelPathTree(wx.Panel):
    def __init__(self, *args, **kwds):
        self.cbOnTreeCheck = kwds.pop('cbOnTreeCheck', None)
        wx.Panel.__init__(self, *args, **kwds)
        
        agwStyle  = 0
        agwStyle |= HTL.TR_HIDE_ROOT
        agwStyle |= HTL.TR_DEFAULT_STYLE
        agwStyle |= HTL.TR_HAS_BUTTONS
        agwStyle |= HTL.TR_HAS_VARIABLE_ROW_HEIGHT
        agwStyle |= HTL.TR_AUTO_CHECK_CHILD
        agwStyle |= HTL.TR_AUTO_TOGGLE_CHILD
        agwStyle |= HTL.TR_AUTO_CHECK_PARENT
        agwStyle |= HTL.TR_ELLIPSIZE_LONG_ITEMS
        
        self.tree = HTL.HyperTreeList(self, wx.ID_ANY, agwStyle=agwStyle)

        self.__set_properties()
        self.__do_layout()

        self.tree.Bind(HTL.EVT_TREE_ITEM_CHECKED, self.onTreeCheck)

    def __set_properties(self):
        self.tree.AddColumn("Points de surverse")
        self.tree.SetMainColumn (0) # the one with the tree in it...
        self.tree.SetColumnWidth(0, 800)

    def __do_layout(self):
        szrMain = wx.BoxSizer(wx.VERTICAL)
        szrMain.Add(self.tree, 1, wx.EXPAND, 0)
        self.SetSizer(szrMain)
        szrMain.Fit(self)
        self.Layout()

    def onTreeCheck(self, event):
        """
        Handler for event tree check, call when an item in the tree
        is checked/unchecked. The state of the tree will be modified to
        reflect the selection.
        """
        item = event.GetItem()
        # ---
        node = event.GetItem()
        if node.Is3State() and node.Get3StateValue() == wx.CHK_UNDETERMINED:
            ASPanelPathTree.checkNodeRecurse(node, False)
        # ---
        root = self.tree.GetRootItem()
        ASPanelPathTree.setNode3State(root)
        root.Set3StateValue(wx.CHK_CHECKED)     # Keep root checked
        # ---
        self.tree.Refresh()
        
        # ---  Call-back
        if self.cbOnTreeCheck:
            self.cbOnTreeCheck()
        
    @staticmethod
    def checkNodeRecurse(node, checked):
        """
        Check/uncheck all nodes recursively.
        """
        if node.HasChildren():
            for child in node.GetChildren():
                ASPanelPathTree.checkNodeRecurse(child, checked)
            node.Check(checked)
        else:
            node.Check(checked)

    @staticmethod
    def setNode3State(node):
        """
        Set the tree state. According to the number of selected
        childrens, a node will be checked, unchecked or undetermined.
        """
        nCheck = 0
        nChild = 0
        if node.HasChildren():
            for child in node.GetChildren():
                nChild += 1
                nCheck += ASPanelPathTree.setNode3State(child)
            try:
                if nCheck == 0:
                    node.Set3StateValue(wx.CHK_UNCHECKED)
                    nCheck = 0
                elif nCheck == nChild:
                    node.Set3StateValue(wx.CHK_CHECKED)
                    nCheck = 1
                else:
                    node.Set3StateValue(wx.CHK_UNDETERMINED)
                    nCheck = .5
            except Exception:
                pass
        else:
            nChild = 1
            if node.IsChecked():
                nCheck = 1
        return nCheck/nChild

    def fillTree(self, plumes):
        """
        Fill the tree with the supplied data.

        Args:
            bbModels (list):    List of models
        Returns:
            None
        """
        def comparePlume(l):
            return (l.dilution, l.stationName, l.tide[1], l.tide[0], l.isPlumeDirect, l.injectionTime)
        
        # ---  Sort plumes
        plumesSorted = sorted(plumes, key=comparePlume)

        # ---  Empty tree
        self.tree.Hide()
        self.tree.DeleteAllItems()
        
        # ---  Set root
        root = self.tree.AddRoot('ASur')
        root.Set3State(True)
        if plumesSorted[0].stationName == 'Root':
            root.SetData(plumesSorted[0])
            del plumesSorted[0]

        # ---  Fill tree
        actuDil = -1.0e90
        for plume in plumesSorted:
            if plume.dilution != actuDil:
                info = '%.2e' % plume.dilution
                nodeDil = self.tree.AppendItem(root, info, ct_type=1)
                nodeDil.Set3State(True)
                actuDil = plume.dilution
                actuStn = ''
            if plume.stationName != actuStn:
                info = plume.stationName
                nodeStn = self.tree.AppendItem(nodeDil, info, ct_type=1)
                nodeStn.Set3State(True)
                actuStn = plume.stationName
                actuTide = ()
            if plume.tide != actuTide:
                info = '%s' % str(plume.tide)
                nodeTid = self.tree.AppendItem(nodeStn, info, ct_type=1)
                nodeTid.Set3State(True)
                actuTide = plume.tide
                actuDrct = -1
            if int(plume.isPlumeDirect) != actuDrct:
                info = 'Directe' if plume.isPlumeDirect else 'Invers√©'
                nodeDir = self.tree.AppendItem(nodeTid, info, ct_type=1)
                nodeDir.Set3State(True)
                actuDrct = int(plume.isPlumeDirect)

            info = '%s' % plume.injectionTime.astimezone()
            child = self.tree.AppendItem(nodeDir, info, ct_type=1, data=plume)
            child.Set3State(False)


        ASPanelPathTree.checkNodeRecurse(root, True)
        self.tree.Show()
        self.Refresh()

    def __getCheckedItems(self, node):
        res = []
        if node.HasChildren():
            if node.IsChecked() and node.GetData():
                res = [ node.GetData() ]
            for child in node.GetChildren():
                res.extend( self.__getCheckedItems(child))
        else:
            if node.IsChecked():
                res = [ node.GetData() ]
        return res

    def getCheckedItems(self):
        """
        Return the list of checked items
        """
        LOGGER.trace('ASPanelPathTree.getCheckedItems')
        root = self.tree.GetRootItem()
        return self.__getCheckedItems(root)
        
# end of class ASPanelPathTree

if __name__ == "__main__":
    from datetime import datetime
    import pytz
    import wx
    from ASModel import ASPlume
    
    def main():
        def onTreeCheck():
            LOGGER.trace('onTreeCheck')
            plumes = panel.getCheckedItems()
            print(plumes[0])
    
        app = wx.App()
        fr = wx.Frame(None, title='test')
        fr.SetSize((800, 600))
        panel = ASPanelPathTree(fr, wx.ID_ANY, cbOnTreeCheck=onTreeCheck)
        
        plumes = [ 
            ASPlume(name='Root',    tide=(-1,-1), poly=[(0,0), (1,1)]),
            ASPlume(dilution=1.0e03, name='station', tide=(10, 1), t0=datetime.now(tz=pytz.utc), isDirect=False),
            ASPlume(dilution=1.0e03, name='station', tide=(10, 1), t0=datetime.now(tz=pytz.utc), isDirect=True),
            ASPlume(dilution=1.0e03, name='station', tide=(10, 2), t0=datetime.now(tz=pytz.utc), isDirect=False),
        ]
        panel.fillTree(plumes)
        plumes = panel.getCheckedItems()
        
        fr.Show()
        app.MainLoop()

    logHndlr = logging.StreamHandler()
    FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    logHndlr.setFormatter( logging.Formatter(FORMAT) )

    LOGGER.addHandler(logHndlr)
    LOGGER.setLevel(logging.TRACE)
    main()
    