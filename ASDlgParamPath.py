#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#************************************************************************
# --- Copyright (c) Yves Secretan 2018
# ---
# --- Licensed under the Apache License, Version 2.0 (the "License");
# --- you may not use this file except in compliance with the License.
# --- You may obtain a copy of the License at
# ---
# ---     http://www.apache.org/licenses/LICENSE-2.0
# ---
# --- Unless required by applicable law or agreed to in writing, software
# --- distributed under the License is distributed on an "AS IS" BASIS,
# --- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# --- See the License for the specific language governing permissions and
# --- limitations under the License.
#************************************************************************
#
# generated by wxGlade 0.8.3 on Sun Dec 02 13:39:11 2018
#

import wx
import wx.lib.colourselect as  wxcsel

from ASEvents import ASEventButton
from ASPathParameters import ASPathParameters, CLR_SRC, ELL_STL

class ASDlgParamPath(wx.Dialog):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE # | wx.MINIMIZE_BOX
        super(ASDlgParamPath, self).__init__(*args, **kwds)

        clrSrc = [n.name for n in CLR_SRC]
        ellStl = [n.name for n in ELL_STL]
        self.chkDoDrawBGMap     = wx.CheckBox   (self, wx.ID_ANY, "Affiche le fond de carte")
        self.chkDoDrawShoreline = wx.CheckBox   (self, wx.ID_ANY, "Affiche le ligne de berge")
        self.chkDoDrawPolygon   = wx.CheckBox   (self, wx.ID_ANY, "Affiche les polygones")
        self.stxShorelineColor  = wx.StaticText (self, wx.ID_ANY, "Couleur de la ligne de berge")
        self.btnShorelineColor  = wxcsel.ColourSelect(self, -1, " "*15)
        self.stxPolygonColor    = wx.StaticText (self, wx.ID_ANY, "Couleur des polygones")
        self.btnPolygonColor    = wxcsel.ColourSelect(self, -1, " "*15)

        self.chkDoDrawPath      = wx.CheckBox   (self, wx.ID_ANY, "Affiche les tracés")
        self.chkDoClipPath      = wx.CheckBox   (self, wx.ID_ANY, "Limite le tracé")
        self.chkDoPathCursor    = wx.CheckBox   (self, wx.ID_ANY, "Curseur des tracés")
        self.chkDoDrawColorbar  = wx.CheckBox   (self, wx.ID_ANY, "Affiche la légende de couleur")
        self.stxPathColorSource = wx.StaticText (self, wx.ID_ANY, "Source pour la couleur", style=wx.ALIGN_LEFT)
        self.cbxPathColorSource = wx.ComboBox   (self, wx.ID_ANY, choices=clrSrc, value=clrSrc[0], style=wx.CB_DROPDOWN | wx.CB_READONLY)

        self.chkDoDrawEllipse   = wx.CheckBox   (self, wx.ID_ANY, "Affiche les ellipses")
        self.chkDoEllpsCursor   = wx.CheckBox   (self, wx.ID_ANY, "Curseur des ellipses")
        self.stxEllipseStyle    = wx.StaticText (self, wx.ID_ANY, "Style de tracé", style=wx.ALIGN_LEFT)
        self.cbxEllipseStyle    = wx.ComboBox   (self, wx.ID_ANY, choices=ellStl, value=ellStl[0], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.stxEllipseFrequency= wx.StaticText (self, wx.ID_ANY, "Fréquence de tracé")
        self.spnEllipseFrequency= wx.SpinCtrl   (self, wx.ID_ANY, "-1", min=-1, max=99)
        self.stxEllipseColor    = wx.StaticText (self, wx.ID_ANY, "Couleur")
        self.btnEllipseColor    = wxcsel.ColourSelect(self, -1, " "*15)
        self.stxEllipseAlpha    = wx.StaticText (self, wx.ID_ANY, "Transparence (alpha)")
        self.spnEllipseAlpha    = wx.SpinCtrlDouble(self, wx.ID_ANY, "0.0", min=0.0, max=1.0, inc=0.1)

        self.btnOK     = wx.Button(self, wx.ID_OK,  "")
        self.btnCancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        # ---  Until activated in the code, hide the widgets
        self.stxEllipseStyle.Hide()
        self.cbxEllipseStyle.Hide()

        self.Bind(wx.EVT_CHECKBOX,  self.onChkDrawPath,     self.chkDoDrawPath)
        self.Bind(wx.EVT_CHECKBOX,  self.onChkDrawEllipse,  self.chkDoDrawEllipse)

        self.Bind(wx.EVT_BUTTON,    self.onBtnOK,           self.btnOK)
        self.Bind(wx.EVT_BUTTON,    self.onBtnCancel,       self.btnCancel)
        # end wxGlade

        prm = ASPathParameters()
        self.setParameters(prm)

    def __set_properties(self):
        self.SetTitle("Paramètres d'affichage des tracés")
        self.SetSize((470, 295))

        self.chkDoDrawBGMap.SetToolTip      ("Affiche le fond de carte")
        self.chkDoDrawShoreline.SetToolTip  ("Affiche le ligne de berge")
        self.chkDoDrawPolygon.SetToolTip    ("Affiche les polygones de détection des stations")
        self.stxShorelineColor.SetToolTip   ("Couleur de la ligne de berge")
        self.btnShorelineColor.SetToolTip   ("Couleur de la ligne de berge")
        self.stxPolygonColor.SetToolTip     ("Couleur des polygones des stations")
        self.btnPolygonColor.SetToolTip     ("Couleur des polygones des stations")

        self.chkDoDrawPath.SetToolTip       ("Affiche le tracé des particules")
        self.chkDoClipPath.SetToolTip       ("Limite le tracé au seuil de détection")
        self.chkDoPathCursor.SetToolTip     ("Active le curseur des données")
        self.chkDoDrawColorbar.SetToolTip   ("Affiche à côté de la carte la légende des couleurs")
        self.stxPathColorSource.SetToolTip  ("La couleur est soit basée sur la concentration, soit sur le temps de parcours.")
        self.cbxPathColorSource.SetToolTip  ("La couleur est soit basée sur la concentration, soit sur le temps de parcours.")

        self.chkDoDrawEllipse.SetToolTip    ("Affiche les ellipses de concentration")
        self.chkDoEllpsCursor.SetToolTip    ("Active le curseur des ellipses")
        self.stxEllipseStyle.SetToolTip     ("Défini le style de tracé des ellipses")
        self.cbxEllipseStyle.SetToolTip     ("Défini le style de tracé des ellipses")
        self.spnEllipseFrequency.SetToolTip ("Trace une ellipse tout les N pas de ~15min. -1 pour tracer uniquement le dernier.")
        self.stxEllipseFrequency.SetToolTip ("Trace une ellipse tout les N pas de ~15min. -1 pour tracer uniquement le dernier.")
        self.stxEllipseColor.SetToolTip     ("Couleur pour les ellipses")
        self.btnEllipseColor.SetToolTip     ("Couleur pour les ellipses")
        self.stxEllipseAlpha.SetToolTip     ("Alpha (transparence) pour les ellipses")
        self.spnEllipseAlpha.SetToolTip     ("Alpha (transparence) pour les ellipses")

        w = self.spnEllipseFrequency
        size = w.GetSizeFromTextSize(w.GetTextExtent('00'))
        w.SetMinSize(size)

        w = self.spnEllipseAlpha
        size = w.GetSizeFromTextSize(w.GetTextExtent('100'))
        w.SetMinSize(size)
        # end wxGlade

    def __do_layout(self):
        szrMain = wx.FlexGridSizer(2, 2, 2, 2)  # rows, cols, vgap, hgap
        szrBtn  = wx.BoxSizer(wx.HORIZONTAL)
        szrCtrl = wx.BoxSizer(wx.VERTICAL)
        #szrTop  = wx.BoxSizer(wx.HORIZONTAL)
        #szrLeft = wx.BoxSizer(wx.VERTICAL)
        #szrRight= wx.BoxSizer(wx.VERTICAL)

        szrBgnd = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Fond de carte"), wx.VERTICAL)
        szrPath = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Tracé des particules"), wx.VERTICAL)
        szrEllps= wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Tracé des ellipses"), wx.VERTICAL)

        szrSClr = wx.BoxSizer(wx.HORIZONTAL)
        szrYClr = wx.BoxSizer(wx.HORIZONTAL)
        szrFrq  = wx.BoxSizer(wx.HORIZONTAL)
        szrPClr = wx.BoxSizer(wx.HORIZONTAL)
        szrEClr = wx.BoxSizer(wx.HORIZONTAL)
        szrEStl = wx.BoxSizer(wx.HORIZONTAL)
        szrAlf  = wx.BoxSizer(wx.HORIZONTAL)

        szrSClr.Add(self.stxShorelineColor,  2, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
        szrSClr.Add(self.btnShorelineColor,  1, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        szrYClr.Add(self.stxPolygonColor,    2, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
        szrYClr.Add(self.btnPolygonColor,    1, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        szrFrq.Add(self.stxEllipseFrequency, 2, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
        szrFrq.Add(self.spnEllipseFrequency, 1, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        szrPClr.Add(self.stxPathColorSource, 1, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
        szrPClr.Add(self.cbxPathColorSource, 0, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        szrEStl.Add(self.stxEllipseStyle,    2, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
        szrEStl.Add(self.cbxEllipseStyle,    1, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        szrEClr.Add(self.stxEllipseColor,    2, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
        szrEClr.Add(self.btnEllipseColor,    1, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        szrAlf.Add(self.stxEllipseAlpha,     2, wx.ALIGN_BOTTOM | wx.EXPAND, 0)
        szrAlf.Add(self.spnEllipseAlpha,     1, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        szrBgnd.Add(self.chkDoDrawBGMap,     0, wx.EXPAND, 0)
        szrBgnd.Add(self.chkDoDrawShoreline, 0, wx.EXPAND, 0)
        szrBgnd.Add(self.chkDoDrawPolygon,   0, wx.EXPAND, 0)
        szrBgnd.Add((0, 5),                  0, wx.EXPAND, 0)
        szrBgnd.Add(szrSClr,                 0, wx.EXPAND, 0)
        szrBgnd.Add((0, 2),                  0, wx.EXPAND, 0)
        szrBgnd.Add(szrYClr,                 0, wx.EXPAND, 0)

        szrPath.Add(self.chkDoDrawPath,      0, wx.EXPAND, 0)
        szrPath.Add(self.chkDoClipPath,      0, wx.EXPAND, 0)
        szrPath.Add(self.chkDoPathCursor,    0, wx.EXPAND, 0)
        szrPath.Add(self.chkDoDrawColorbar,  0, wx.EXPAND, 0)
        szrPath.Add((0, 5),                  0, wx.EXPAND, 0)
        szrPath.Add(szrPClr,                 0, wx.EXPAND, 0)

        szrEllps.Add(self.chkDoDrawEllipse,  0, wx.EXPAND, 0)
        szrEllps.Add(self.chkDoEllpsCursor,  0, wx.EXPAND, 0)
        szrEllps.Add((0, 5),                 0, wx.EXPAND, 0)
        szrEllps.Add(szrEStl,                0, wx.EXPAND, 0)
        szrEllps.Add((0, 2),                 0, wx.EXPAND, 0)
        szrEllps.Add(szrFrq,                 0, wx.EXPAND, 0)
        szrEllps.Add((0, 2),                 0, wx.EXPAND, 0)
        szrEllps.Add(szrEClr,                0, wx.EXPAND, 0)
        szrEllps.Add((0, 2),                 0, wx.EXPAND, 0)
        szrEllps.Add(szrAlf,                 0, wx.EXPAND, 0)

        ## szrLeft.Add(szrBgnd,                 1, wx.EXPAND, 0)
        ## szrLeft.Add((0, 5),                  0, wx.EXPAND, 0)
        ## szrLeft.Add(szrPath,                 1, wx.EXPAND, 0)
        ## 
        szrBtn.Add((20, 0),                  1, wx.EXPAND, 0)
        szrBtn.Add(self.btnOK,               0, 0, 0)
        szrBtn.Add(self.btnCancel,           0, 0, 0)
        szrCtrl.Add((20, 20),               1, wx.EXPAND, 0)
        szrCtrl.Add(szrBtn,                 0, wx.EXPAND, 0)

        ## szrRight.Add(szrEllps,               1, wx.EXPAND, 0)
        ## szrRight.Add((20, 20),               1, wx.EXPAND, 0)
        ## szrRight.Add(szrBtn,                 0, wx.EXPAND, 0)
        ## 
        ## szrTop.Add(szrLeft,                  1, wx.EXPAND, 0)
        ## szrTop.Add(szrRight,                 1, wx.EXPAND, 0)

        szrMain.AddMany( [(szrBgnd,  1, wx.EXPAND), 
                          (szrEllps, 1, wx.EXPAND), 
                          (szrPath,  1, wx.EXPAND), 
                          (szrCtrl,  1, wx.EXPAND)] )
        #szrMain.Add(szrBtm,                  0, wx.EXPAND, 0)

        self.SetSizer(szrMain)
        self.Layout()

    def __enablePath(self, enable=True):
        #self.chkDoDrawPath.enable(enable)
        self.chkDoClipPath.Enable(enable)
        self.chkDoPathCursor.Enable(enable)
        self.chkDoDrawColorbar.Enable(enable)
        self.stxPathColorSource.Enable(enable)
        self.cbxPathColorSource.Enable(enable)

    def __enableEllipse(self, enable=True):
        #self.chkDoDrawEllipse.Enable(enable)
        self.chkDoEllpsCursor.Enable(enable)
        self.stxEllipseStyle.Enable(enable)
        self.cbxEllipseStyle.Enable(enable)
        self.stxEllipseFrequency.Enable(enable)
        self.spnEllipseFrequency.Enable(enable)
        self.stxEllipseColor.Enable(enable)
        self.btnEllipseColor.Enable(enable)
        self.stxEllipseAlpha.Enable(enable)
        self.spnEllipseAlpha.Enable(enable)

    def __getColor(self, btn):
        return btn.GetValue().GetAsString(flags=wx.C2S_HTML_SYNTAX)

    def onChkDrawPath(self, event):
        enable = self.chkDoDrawPath.GetValue()
        self.__enablePath(enable)

    def onChkDrawEllipse(self, event):
        enable = self.chkDoDrawEllipse.GetValue()
        self.__enableEllipse(enable)

    def onBtnOK(self, event):
        # wx.PostEvent(self, ASEventButton(self.GetId()))
        event.Skip()

    def onBtnCancel(self, event):
        event.Skip()

    def getParameters(self):
        prm = ASPathParameters()
        prm.doDrawBGMap     = self.chkDoDrawBGMap.GetValue()
        prm.doDrawShoreline = self.chkDoDrawShoreline.GetValue()
        prm.doDrawPolygon   = self.chkDoDrawPolygon.GetValue()
        prm.shorelineColor  = self.__getColor(self.btnShorelineColor)
        prm.polygonColor    = self.__getColor(self.btnPolygonColor)

        prm.doDrawPath      = self.chkDoDrawPath.GetValue()
        prm.doClipPath      = self.chkDoClipPath.GetValue()
        prm.doPathCursor    = self.chkDoPathCursor.GetValue()
        prm.doDrawColorbar  = self.chkDoDrawColorbar.GetValue()
        prm.pathColorSource = CLR_SRC(self.cbxPathColorSource.GetSelection()+1) # enum en base 1, combo en base 0

        prm.doDrawEllipse   = self.chkDoDrawEllipse.GetValue()
        prm.doEllipseCursor = self.chkDoEllpsCursor.GetValue()
        prm.ellipseStyle    = ELL_STL(self.cbxEllipseStyle.GetSelection()+1) # enum en base 1, combo en base 0
        prm.ellipseFrequency= self.spnEllipseFrequency.GetValue()
        prm.ellipseColor    = self.__getColor(self.btnEllipseColor)
        prm.ellipseAlpha    = self.spnEllipseAlpha.GetValue()
        return prm

    def setParameters(self, prm):
        self.chkDoDrawBGMap.SetValue     (prm.doDrawBGMap)
        self.chkDoDrawShoreline.SetValue (prm.doDrawShoreline)
        self.chkDoDrawPolygon.SetValue   (prm.doDrawPolygon)
        self.btnShorelineColor.SetValue  (prm.shorelineColor)
        self.btnPolygonColor.SetValue    (prm.polygonColor)

        self.chkDoDrawPath.SetValue      (prm.doDrawPath)
        self.chkDoClipPath.SetValue      (prm.doClipPath)
        self.chkDoPathCursor.SetValue    (prm.doPathCursor)
        self.chkDoDrawColorbar.SetValue  (prm.doDrawColorbar)
        self.cbxPathColorSource.SetSelection(prm.pathColorSource.value-1)   # enum en base 1, combo en base 0
        #self.cbxPathColorSource.SetSelection(prm.pathColorSource-1)   # enum en base 1, combo en base 0

        self.chkDoDrawEllipse.SetValue   (prm.doDrawEllipse)
        self.chkDoEllpsCursor.SetValue   (prm.doEllipseCursor)
        self.cbxEllipseStyle.SetSelection(prm.ellipseStyle.value-1)   # enum en base 1, combo en base 0
        #self.cbxEllipseStyle.SetSelection(prm.ellipseStyle-1)   # enum en base 1, combo en base 0
        self.spnEllipseFrequency.SetValue(prm.ellipseFrequency)
        self.btnEllipseColor.SetValue    (prm.ellipseColor)
        self.spnEllipseAlpha.SetValue    (prm.ellipseAlpha)

        self.__enablePath   (prm.doDrawPath)
        self.__enableEllipse(prm.doDrawEllipse)

if __name__ == "__main__":
    from ASEvents import ASEVT_BUTTON
    class MyApp(wx.App):
        def OnInit(self):
            self.dialog = ASDlgParamPath(None, wx.ID_ANY, "")
            self.SetTopWindow(self.dialog)
            self.dialog.Show()
            #self.Bind(ASEVT_BUTTON, self.on_btn, self.dialog)
            #self.dialog.Destroy()
            return True

        def on_btn(self, event):
            print(self.dialog.getParameters().pathColorSource)
            print(self.dialog.getParameters().ellipseColor)
        
    app = MyApp(0)
    app.MainLoop()
